//
//  CircleTriadKit.swift
//  CircleTriad
//
//  Created by Matias Piipari on 13/06/2016.
//  Copyright (c) 2016 Lumoa Ltd. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import Cocoa

public class CircleTriadKit : NSObject {

    //// Drawing Methods

    public class func drawCircleTriad(circleFillGradient circleFillGradient: NSGradient, circleShadow: NSShadow, outerCircleShadow: NSShadow, inset: CGFloat = 7, width: CGFloat = 128, middleCircleInsetFraction: CGFloat = 0.725) {
        //// General Declarations
        let context = NSGraphicsContext.currentContext()!.CGContext


        //// Variable Declarations
        let outerWidth: CGFloat = width - inset * 2
        let middleCircleWidth: CGFloat = (width - inset * 2) * middleCircleInsetFraction
        let middleCircleInset: CGFloat = (width - middleCircleWidth) * 0.5
        let innerCircleWidth: CGFloat = (width - inset * 2) * (middleCircleInsetFraction - (1 - middleCircleInsetFraction))
        let innerCircleInset: CGFloat = (width - innerCircleWidth) * 0.5

        //// Outer Circle Drawing
        let outerCirclePath = NSBezierPath(ovalInRect: NSMakeRect(inset, inset, outerWidth, outerWidth))
        NSGraphicsContext.saveGraphicsState()
        outerCircleShadow.set()
        CGContextBeginTransparencyLayer(context, nil)
        circleFillGradient.drawInBezierPath(outerCirclePath, angle: -90)
        CGContextEndTransparencyLayer(context)
        NSGraphicsContext.restoreGraphicsState()



        //// Middle Circle Drawing
        let middleCirclePath = NSBezierPath(ovalInRect: NSMakeRect(middleCircleInset, middleCircleInset, middleCircleWidth, middleCircleWidth))
        NSGraphicsContext.saveGraphicsState()
        circleShadow.set()
        CGContextBeginTransparencyLayer(context, nil)
        circleFillGradient.drawInBezierPath(middleCirclePath, angle: -90)
        CGContextEndTransparencyLayer(context)
        NSGraphicsContext.restoreGraphicsState()



        //// Inner Circle Drawing
        let innerCirclePath = NSBezierPath(ovalInRect: NSMakeRect(innerCircleInset, innerCircleInset, innerCircleWidth, innerCircleWidth))
        NSGraphicsContext.saveGraphicsState()
        circleShadow.set()
        CGContextBeginTransparencyLayer(context, nil)
        circleFillGradient.drawInBezierPath(innerCirclePath, angle: -90)
        CGContextEndTransparencyLayer(context)
        NSGraphicsContext.restoreGraphicsState()
    }

    //// Generated Images

    public class func imageOfCircleTriad(circleFillGradient circleFillGradient: NSGradient, circleShadow: NSShadow, outerCircleShadow: NSShadow, inset: CGFloat = 7, width: CGFloat = 128, middleCircleInsetFraction: CGFloat = 0.725) -> NSImage {
        return NSImage(size: NSMakeSize(128, 128), flipped: false) { (NSRect) -> Bool in 
                CircleTriadKit.drawCircleTriad(circleFillGradient: circleFillGradient, circleShadow: circleShadow, outerCircleShadow: outerCircleShadow, inset: inset, width: width, middleCircleInsetFraction: middleCircleInsetFraction)

            return true
        }
    }

}
